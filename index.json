[{"categories":null,"content":"Intro to Computing in Python","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":" Course Outline ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:0:0","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Unit 1 Computing:Â the basic principles of working with computers. Programming:Â the general workflow of writing and running programs. Writing code, compiling it, executing it, and evaluating the results. Debugging:Â the process of finding and fixing errors in your programs. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:1:0","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Unit 2 Procedural Programming: The general idea of writing sequences of instructions for the computer to perform. Variables: Creating and modifying data in our programs. Logical Operators: Establishing the truth or falsehood of relationships among variables in our programs. Mathematical Operators: Using arithmetic operators (addition, multiplication, etc.) to modify the values of variables in our programs. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:2:0","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Unit 3 Control Structures: The general idea of lines of code that can control other lines of code. Conditionals: Lines of code (called if statements) that check logical expressions to see if certain code blocks should run. Loops: Lines of code that instruct the computer to repeat a block of code until some condition is met. Functions: Miniature programs within a larger program, each with their own input, code, and output. Exception Handling: Lines of code that instruct the computer how to fail gracefully when errors are encountered. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:3:0","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Unit 4 Data Structures: The general idea of data types more complex than individual letters and numbers. Strings: Ordered series of characters that often represent natural human language. Lists: Ordered series of other kinds of data, collected under one variable name and accessed via numeric indices. File Input/Output: Writing a programâ€™s data to a file so it can later be re-loaded after the program is closed and reopened. Dictionaries: Pairs of keys and values collected under one variable name, like lists with non-numeric indices. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:4:0","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Unit 5 Objects: Creating and using custom data types so our programs can reason about the world the way we do. Algorithms: Complex sequences of instructions that transform data or generate useful conclusions. Unit 1 ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:5:0","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Chapter 1.1: Computing ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:6:0","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Programming Vocabulary Code: Commands given to a computer in order to perform a task. Line of code: A single command. Program: A collection of lines of code that serve one or more overall functions. Input (files, user input, websites) ðŸ‘‰ code ðŸ‘‰ output (files, screen, sound) Compile: To translate human-readable computer code into low-level commands the computer can execute. In the programming flow, this functions as reading over code and looking for errors. (proofreading by compilers) Run/Excution: Running some code and having it actually perform its operations. Compiling just makes sure what we told the program to do makes sense; running checks whether the program actually do what we want it to do. Compilation could potentially be skipped. Languages that require compilation are called static/compiled languages. Languages that do not require compilation are called dynamic/interpreted languages. Nonetheless though, even with dynamic languages, we often mimic the workflow of static languages. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:6:1","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Programming Language Categorization of languages: Static \u0026 Dynamic: whether compilation is required Hight-level languages involve a great deal of abstraction from the low-level details of the computer like memory, whereas low-level languages require these details to be addressed manually. Popularity of different languages C++ and C# are two successors to the programming language C, which is a low-level language used a lot in developing operating systems, video games, and other highly complex programs. C++ adds a few more features to C, while C# is more of a high-level version. Java, C, C++, and C# are static, compiled languages; Python is the top dynamic, scripting language on this list. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:6:2","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Console vs. GUI Graphical user interfaces (GUIs): An output medium that uses more than just text, like forms, buttons, tabs, and more. Eg. a web brower, a word processor like Microsoft Word, a smartphone app, a modern operating system like Windows or Mac OS. Console: An output medium for a program to show exclusively text-based output. Eg. command line interfaces like the terminal on a Mac or the command window on a PC. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:6:3","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Fundations, language, and domain Foundations are the core principles of computing that transcend specific programming languages. These foundational principles are then implemented in specific programming languages. You then apply them to a particular domain. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:6:4","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"},{"categories":null,"content":"Python Python is a high-level, platform independent programming language. Python abstracts further away from the inner workings of the computer than lower-level languages (like memory management), thus is easier to use. Python is dynamic \u0026 interpreted, which means that Python will run our code line by line when we ask it to without trying to compile it first. That opens up the possibility of using Python in a command line interface where we write and run lines of code one at a time. Whereas in the scripting mode, we write a bunch of code, then run it all at once. The main takeaway of Python being an interpreted language is that we might not be aware of errors until we actually try to run those lines. ","date":"2021-10-17","objectID":"/gatech-cs-1301-computing-in-python-i/:6:5","tags":null,"title":"Gatech CS 1301","uri":"/gatech-cs-1301-computing-in-python-i/"}]