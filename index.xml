<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Worgen</title><link>https://ryandoren.github.io/</link><description>Worgen in the Woods</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 25 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ryandoren.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Gatech CS1301xIV</title><link>https://ryandoren.github.io/gatech-cs1301xiv/</link><pubDate>Sat, 25 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://ryandoren.github.io/gatech-cs1301xiv/</guid><description><![CDATA[Unit 5 Chapter 5.1: Objects Basic Concepts   Object-oriented programming: A programming paradigm where programmers define custom data types that have custom methods embedded within them.
  Object: An object is a custom data structure that organizes and encapsulates variables and methods into a single data type. It is used near-interchangeably with “instance.” It&rsquo;s like the general &lsquo;prototype&rsquo; or &lsquo;template&rsquo;.
  Class: A custom data type comprised of multiple variables and/or methods.]]></description></item><item><title>Gatech CS1301xIII.md</title><link>https://ryandoren.github.io/gatech-cs1301xiii/</link><pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://ryandoren.github.io/gatech-cs1301xiii/</guid><description>Unit 4 Chapter 4.1: Data Structures Data structures are approaches to organizing abstract data types, such that the data can be accessed efficiently.
List-Like Structures: Also referred to as sequences and collections, a data structure that holds multiple individual values gathered together under one variable name, accessed via indices. This includes structures like lists, arrays, and tuples. Lists are simultaneously a general type of data structure and a specific data type in some languages.</description></item><item><title>Gatech CS1301xII</title><link>https://ryandoren.github.io/gatech-cs1301xii/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://ryandoren.github.io/gatech-cs1301xii/</guid><description>&amp;ldquo;Always code as if whoever ends up maintaining your code will be a violent psychopath who knows where you live.&amp;rdquo; -Martin Golding
😂😂😂😂😂😂😂😂😂😂😂😂 Fine.
Unit 3 Chapter 3.1: Basics of Control Structures Control Structures: Statements that control the flow of execution of the program. Or, more simply, lines of code that control when other lines of code run. They allow us to loop over certain lines of code multiple times, changing the data that they act on each time.</description></item><item><title>Gatech CS1301xI</title><link>https://ryandoren.github.io/gatech-cs1301xi/</link><pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://ryandoren.github.io/gatech-cs1301xi/</guid><description>Extra materials How to Think Like a Computer Scientist: Interactive Edition How to Think Like a Computer Scientist: Learning with Python 3 Python for Everybody (PY4E) Hands-on Python 3 Tutorial Beginning Python Programming for Aspiring Web Developers Course Outline Unit 1 Computing: the basic principles of working with computers. Programming: the general workflow of writing and running programs. Writing code, compiling it, executing it, and evaluating the results.</description></item><item><title>卡拉瓦乔《圣马太蒙召》</title><link>https://ryandoren.github.io/the-calling-of-saint-mathew/</link><pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate><author>Author</author><guid>https://ryandoren.github.io/the-calling-of-saint-mathew/</guid><description>前言 人们或许听说过 《马太福音》📕，也听说过 “马太效应”。但是，关于【马太】这个人，却知之寥寥。【圣马太】(Saint Matthew) 是基督耶稣的十二使徒之一，也是第一卷福音书的作者。在成为耶稣的门徒之前，犹太人马太是迦百农的一名税吏💰，他终日坐在罗马税关之上，招呼着过往的人们缴税。而 “马太效应” 则出自 《新约·马太福音》 中的一句话：
凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来。
马太受耶稣感召的场景成为后世艺术家们津津乐道的题材。在 《马太福音》 中，对这个命运转变时刻的记录十分简略：
耶稣从那里往前走，看见一个人税吏，名叫利未，坐在税关上，就对他说，你跟从我来。他就起身跟从了耶稣。
【卡拉瓦乔】非常认同其中的思想，因为自身性格和相关经历，他很擅长刻画某种可能的==救赎==，这种救赎落在最不可能、最顽固的==罪人==身上。这幅画中，他描绘的是自己的本性，是自己熟悉的人物，是罗马现实生活中的场景，因而当时的看画人也会觉得，卡拉瓦乔的这幅画连接了历史与当下，也连接了平凡与神圣。
画面整体 卡拉瓦乔并没有沿用圣经中所描述的地点，而是创造性地把场景设置在一个阴暗的角落里，我们很难分辨这是室内还是室外，或许是破旧的酒馆，甚至可能是赌场的一隅。他将圣马太蒙召这一瞬间表现为一种==近乎无声的、戏剧性的叙述==，仿佛一切动态都在一瞬间被定格。收税人【利未】（Levi，圣马太成为使徒之前的名字）和他的四个随从围坐在一张桌子旁，桌上随意散落着金币，他们似乎正在专心致志地数着当天的收入。
突然，一束光自右上角射入，照亮了这群人；顺着光源的方向，我们就能看见耶稣——他与【圣彼得】一同进入，身着古旧的袍子，赤裸双脚，看上去与凡人别无二样，唯有 ==头顶的光环==暗示着他的神性😇。他 ==右手==召唤马太的手势，仿佛由于无力和疲倦而显得更加具有神的力量，引人注目。马太对这两位陌生人的闯入感到惊讶Σ(っ °Д °;)っ，也可能是被突然射入的强光炫得眼花缭乱。他身体后倾，用 ==左手==指了指自己👈，好像在说，“谁？我？”，而他的 ==右手==仍停留在正在数着的金币上，还没来得及反应。圣彼得也指向马太，同时转身对着耶稣，似乎在问：“是他吗？”🤔“对，就是你，马太！”这三个人的手势让画面上的故事顿时生动起来，也将马太从世俗生活中剥离出来，从此税吏利未成为圣徒马太。 这样的场景好似现代电影中的一个镜头📽️，充满了戏剧性和紧迫感，它也是卡拉瓦乔作品最具代表性的风格，让观众仿佛置身画中，切身感受到当时的气氛。
细节解读 桌子左边的数金币者 首先，我们来打量一下左边这两个头也不抬，一心数着金币的人。其中一个年长一些的，半弓着腰，眉头紧锁，严肃地抿着嘴。耶稣的圣光照得他那顶着稀稀疏疏银发的脑门子闪闪发光。他用手扶了扶眼镜，极力想数清桌上金币的数目，仿佛心里面在盘算着自己能分到多少银两。他在视力和道德上都是极其短视的。 另一位坐在桌子最左侧、低着头的小伙，眼睛死死地盯着桌上的金币，双肘将身体撑在桌子边缘，左手支在右臂后方，右手轻轻搭在桌上，整体呈现出蠢蠢欲动的状态，好像下一秒就要伸手去拿金币。这两个人如此关心数钱，以至于他们甚至没有注意到耶稣的到来，他们对基督的漠视剥夺了他们获得永生的机会。
某些艺术史学家认为，这两个人物可能在某种程度上受到了【小汉斯·霍尔拜因】 (Hans Holbein the Younger) 的启发✨。在荷尔拜因的 ==木版画《死亡之舞》之十一《赌徒》== 中，三名赌徒坐在桌子旁边，死神和魔鬼为了抢夺中间这名赌徒而产生了争执，左边的这一位似乎在替他的同伴向死神说情，而右边的这一位则闷着头计算着账目，丝毫未注意到死神和魔鬼正在夺取他的朋友。这幅画以一种类似黑色幽默的手法，生动地讽刺了右边这位赌徒对金钱的痴迷，以致于完全忽视了死神和魔鬼的降临。
桌子右边的年轻男孩 桌子右边的两个男孩确实对耶稣的到来做出了回应。面向我们的、稍显年轻的这一个，粉嫩的小脸蛋被圣光照得通亮，他目不转睛地看着两位“不速之客”，下意识地靠向了马太，以寻得一丝安全感。他的手臂搭在马太的肩膀上，好像在说：“大哥，这两个人是不是来找你的啊？”
实际上，正脸面向我们的男孩，是卡拉瓦乔非常喜爱的一名男模特， ==【马里奥·明尼蒂 】(Mario Minniti)==，他曾在卡拉瓦乔的多幅作品中出现过，包括：
《捧着水果篮的男孩》，1593， Boy with a Basket of Fruit 1593 《算命者》，1594 &amp;amp; 1599，The Fortune Teller 1599 《老千》，1594, 两个人物同一个模特，Cardsharps 1594 《音乐家》，1595，两个人物同一个模特Musicians 1595 《酒神巴库斯》，1596，Bacchus 1596 《被蜥蜴咬伤的男孩》，1596，Boy Bitten by a Lizard 1596 《鲁特琴演奏者》，1596，柏明顿庄园版，The Lute Player 1596, Ex-Badminton House, Gloucestershire 《鲁特琴演奏者》，1596，Wildenstein版，The Lute Player 1596, Private Collection.</description></item><item><title>LeetCode with Python——2020名企高频面试题</title><link>https://ryandoren.github.io/leetcode-with-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>Author</author><guid>https://ryandoren.github.io/leetcode-with-python/</guid><description>Microsoft 主题要点 无论你是面试什么岗位，面试官基本都会从以下几个方面全面考察候选人的技术水平。当然，除了这些面试考点以外，你还需要了解目标岗位的其他技术要求，及时查漏补缺，充分备战技术面试。 算法和数据结构一直是技术面试的重点和难点。近年来，很多知名企业如谷歌, 脸书等在面试过程中都会有特定的电话面试环节, 专门用来面算法题。这些企业通常会使用在线协同代码编程网站，需要面试者用一小时解决 4 道算法问题，面试官可以实时看到候选人所写的代码。除了远程面试外, 在 Onsite 面试中还会有白板写代码等环节。 名企面试重点梳理 与其他公司相比，头部互联网公司对面试者的算法水平要求更高，经常出中等及以上难度的题目。不止要求面试者能写出算法，还要求时间复杂度最小，找出最优方式，这就需要我们针对一道题目思考多种解决办法；同时需要注意算法中对异常情况的处理。 除了这些算法外，有的面试官还会临时给一些有规律的数据，让你写出一种算法或给出思路，考验你的逻辑思维能力。想要锻炼算法思维，在学习过程中，需要先掌握一类算法，钻研透了再去掌握另一类，这样在遇到新问题时才能举一反三。在面试中如果遇到卡壳的情况也不用太紧张，面试官会给你一定的提示，你可以根据已掌握的算法，尽量说出解题思路，在思考的过程中也能消除紧张，也许很快就能想出问题的解答思路。
经典题目 53. 最大子序和 (Easy) 力扣链接 知识点：数组；动态规划；贪心；分治
题目描述 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
示例 1：
1 2 3 输入：nums = [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。 示例 2：
1 2 输入：nums = [1] 输出：1 示例 3：
1 2 输入：nums = [5,4,-1,7,8] 输出：23 提示： 进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。</description></item><item><title>LeetCode with Python——算法面试题汇总</title><link>https://ryandoren.github.io/leetcode-with-python%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>Author</author><guid>https://ryandoren.github.io/leetcode-with-python%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</guid><description><![CDATA[开始之前 136. 只出现一次的数字  知识点：异或、位运算、集合
  题目描述：  给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
示例 1:
1 2  输入: [2,2,1] 输出: 1   示例 2:
1 2  输入: [4,1,2,1,2] 输出: 4    说明：  你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 代码：  1 2 3 4 5 6  class Solution: def singleNumber(self, nums: List[int]) -&gt; int: target=0 for i in range(len(nums)): target=target^nums[i] return target    🐍Python 异或（exclusive or，^）：A B有且仅有一者为真 🐍计算过程：基于二进制基础上，将A ^ B 按位异或的过程为，先将A和B分别转换为二进制，按位异或得到结果后再组合起来，最后转换为十进制。 🐍例如：5 ^ 3 的结果为6是因为 5 = 0101(b) 3 = 0011(b) 0^0 -&gt;0 1^0 -&gt;1 0^1 -&gt;1 1^1 -&gt;0 0110(b) 转换为十进制：6 🐍规律总结： a ^ a = 0；自异或结果为0 a ^ 0 = a；与0异或结果为自身 a ^ b ^ c = a ^ c ^ b；异或运算具有交换律]]></description></item></channel></rss>